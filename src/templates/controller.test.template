import { Test, TestingModule } from '@nestjs/testing';
import { <%= className %> } from '<%= importPath %>/<%= fileName %>';
import { <%= serviceName %> } from '<%= importPath %>/<%= serviceFileName %>';
import { HttpException, HttpStatus } from '@nestjs/common';

// Mock Providers
const mock<%= serviceName %> = {
  provide: <%= serviceName %>,
  useValue: {
    <%= serviceMethod %>: jest.fn(),
  },
};

describe('<%= className %> Controller', () => {
  let controller: <%= className %>;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [<%= className %>],
      providers: [mock<%= serviceName %>],
    }).compile();

    controller = module.get<<%= className %>>(<%= className %>);
  });

  describe('Controller Methods', () => {
    <%= testCases %>
  });

  describe('Error Handling', () => {
    it('should throw an error if dependency fails', async () => {
      jest.spyOn(mock<%= serviceName %>.useValue, '<%= serviceMethod %>').mockRejectedValue(new HttpException('Dependency Error', HttpStatus.INTERNAL_SERVER_ERROR));

      try {
        await controller.<%= serviceMethod %>();
      } catch (e) {
        expect(e).toBeInstanceOf(HttpException);
        expect(e.response.message).toEqual('Dependency Error');
        expect(e.status).toEqual(HttpStatus.INTERNAL_SERVER_ERROR);
      }
    });
  });
});
