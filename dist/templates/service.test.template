import { Test } from '@nestjs/testing';
import { <%= serviceName %> } from '<%= servicePath %>';
import { <%= dependencyNames %> } from '<%= dependencyPaths %>';
import { HttpException, HttpStatus } from '@nestjs/common';

// Mock Providers
<%= mockProviders %>

describe('<%= serviceName %> Service', () => {
  let service: <%= serviceName %>;

  beforeEach(async () => {
    const module = await Test.createTestingModule({
      providers: [
        <%= serviceName %>,
        ...<%= mockProvidersArray %>
      ],
    }).compile();

    service = module.get<<%= serviceName %>>(<%= serviceName %>);
  });

  describe('Service Methods', () => {
    <%= testCases %>
  });

  describe('Error Handling', () => {
    it('should throw an error if dependency fails', async () => {
      jest.spyOn(<%= dependencyName %>.useValue, 'getData').mockRejectedValue(new HttpException('Dependency Error', HttpStatus.INTERNAL_SERVER_ERROR));

      try {
        await service.<%= serviceMethod %>();
      } catch (e) {
        expect(e).toBeInstanceOf(HttpException);
        expect(e.response.message).toEqual('Dependency Error');
        expect(e.status).toEqual(HttpStatus.INTERNAL_SERVER_ERROR);
      }
    });
  });
});
